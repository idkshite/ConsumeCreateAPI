

var https = require('https')
var pathlib = require('path')

// constants

var HOST = 'api.dnsimple.com'

// expose

module.exports = Records

function Records(auth) {
  if (!auth.email || !auth.token) throw new Error('auth not correct')
  return new Api(auth)
}

function Api(auth) {
  this.email = auth.email
  this.token = auth.token
  return this
}



Api.prototype.domain = function(name, cb) {

  var path = pathlib.join('domains', name, 'records') 

  this.get(path, function(err, result) {
   
    if (err) return cb(err)

    var filtered = this.filterRecords(result)
    cb(null, filtered)

  })

}

// Returns [] of all domains available 

Api.prototype.domains = function(cb) {

  var self = this 

  this.get.call(this, '/domains', function(err, result) {
    if (err) return cb(err)
    var filtered = self.filterDomainReponse(result)
    cb(null, filtered)
  })

}

Api.prototype.set = function(domain, name, record_type, content, cb) {
  
  // TODO:
  // need to validate these types 
  // and throw appropriate errors 
  
  var record = {}
  record.name = name 
  record.record_type = record_type
  record.content = content

  var post_obj = { record: record }

  var path = pathlib.join('domains', domain, 'records')

  this.post(path, post_obj, function(err, result) {

    if (err) throw err

    if (result.errors) return cb(result.errors.content)

  })


}

// returns [] of domains with their record info

Api.prototype.all = function(cb) {

  var self = this 

  var all = []

  this.domains(function(err, result) {

    var callbacks = result.length

    result.forEach(function(domain) {

      self.domain(domain, function(err, result) {

        var domainObject = {}

        domainObject[domain] = result

        all.push(domainObject)
        
        callbacks--

        if (!callbacks) {
          cb(null, all)
        }

      })

    })

  })

}

Api.prototype.makeHeaders = function() {

  return {
    'Accept': 'application/json',
    'User-Agent': 'Nodejs-DNSimple',
    'X-DNSimple-Token': this.email + ':' + this.token,
    'Content-Type': 'application/json'
  }

}

Api.prototype.makeReqOptions = function(method, path) {

  if (!method.match(/(GET|POST|PUT|DELETE)/)) throw new Error('not a valid method')

  return {
    host: HOST,
    port: 443,
    path: '/v1/' + path,
    method: method,
    headers: this.makeHeaders()
  }

}

Api.prototype.get = function(path, cb) {

  var self = this

  var opts = this.makeReqOptions('GET', path)

  var req = https.request(opts)

  req.end()

  req.on('response', function(res) {

    if (res.statusCode !== 200) {
      var err = new Error('http request not so happy')
      err.code = res.statusCode
      return cb(err)
    }

    var body = ''

    res.on('data', function(chunk) {
      body += chunk
    })

    res.on('error', function(err) {
      return cb(err)
    })

    res.on('end', function() {

      var data = null 

      try {
        data = JSON.parse(body)
      }

      catch(e) {
        var err = new Error('not json')
        return cb(err)
      }

      return cb.call(self, null, data)

    })

  })

  
}

Api.prototype.post = function(path, data, cb) {

  var self = this

  var opts = this.makeReqOptions('POST', path)

  var req = https.request(opts)

  req.write(JSON.stringify(data))
  req.end()

  req.on('response', function(res) {

    if (res.statusCode !== 200) { }

    var body = ''

    res.on('data', function(chunk) {
      body += chunk
    })

    res.on('error', function(err) {
      return cb(err)
    })

    res.on('end', function() {

      var data = null 

      try {
        data = JSON.parse(body)
      }

      catch(e) {
        var err = new Error('not json')
        return cb(err)
      }

      return cb.call(self, null, data)

    })

  })

}

// just get domain names 

Api.prototype.filterDomainReponse = function(json) {

  var keep = ['name']

  // check if array..?
  
  var filtered = []

  json.forEach(function(item) {

    var entry = item.domain

    for (key in entry) {
      if (key === 'name') {
        filtered.push(entry[key])
      }
    }
  
  })

  return filtered

}

Api.prototype.filterRecords = function(json) {

  var allowed = [
    'record_type',
    'name',
    'content'
  ]

  function passes(key) {
     return (allowed.indexOf(key) > -1)
     ? true 
     : false
  }

  filtered = []

  json.forEach(function(item) {

    var nice = {}

    var entry = item.record

    for (key in entry) {
      if (passes(key)) {

        if (key === 'record_type') {
          var type = entry[key]
          // TODO: make this cleaner
          if (type === 'NS' || type === 'MX' || type === 'SOA' || type === 'ALIAS' || type === 'TXT' || type === '') {
            continue
          }
        }

        if (key === 'name') {
          if (entry[key] === '') continue
        }

        nice[key] = entry[key]

        if (nice.name && nice.content && nice.record_type) filtered.push(nice)

      }
    }
  })

  return filtered
}



