#!/usr/bin/env node


var colors = require('colors')
var table = require('text-table')
var argv = require('minimist')(process.argv.slice(2));
var version = require('../package.json').version
var util = require('util')

var keys = require('../keys.json')
var records = require('../')(keys)

var cmds = argv._


if (!cmds.length) usage()
 

// specific parsing for lots of args

if (cmds.length > 1) {

  if (cmds[1] !== 'set') return usage()
 
  var domain = cmds[0]
  var name = cmds[2]
  var record_type = cmds[3]
  var content = cmds[4]

  if (!domain || !name || !record_type || !content) return usage()

  records.set(domain, name, record_type, content, function(err, result) {
    if (err) throw err
    console.log('\n   ok\n'.cyan)
  })
}

else {

  switch (cmds[0]) {

    case 'domains':
      showDomains()
      break;

    case 'all':
      showAll()
      break;

    default:
      showDomain(cmds[0])

  }

}




function showDomains() {
  records.domains(function(err, result) {
    console.log(formatArray(result))
  })
}

function showDomain(domain) {
  records.domain(domain, function(err, result) {
    if (err) {
      if (err.code) return showError(err.code)
    }
    console.log(formatDomain(domain, result))
  })
}

function showAll() {
  records.all(function(err, result) {
    result.forEach(function(item) {
      var row = formatRow(item)
      process.stdout.write(row)
    })
  })
}

function showError(code) {

  switch (code) {

    case 404:
      var estring = '\n cant find that domain \n'
      console.log(estring.red)
      break;

    case 401:
      var estring = '\n having trouble authorizing, check your email and api token \n'
      console.log(estring.red)
      break;

  }

}


function usage() {
  var display = '\n'

  display += '   all \n'.cyan
  display += '   show all records \n\n'
  display += '   domains \n'.cyan
  display += '   see an overview \n\n'
  display += '   <domain> \n'.cyan
  display += '   view records belonging to <domain> \n\n'
  display += '   <domain> set <name> <type> <value> \n'.cyan
  display += '   update <domain> with new record \n\n'

  console.log(display)

}


// command line display utilities

function formatArray(array) {

  var display = '\n' 

  array.forEach(function(item) {
    display += '   ' + item.cyan + '\n'
  })

  return display 

}

function formatDomain(name, domain) {

  var display = '\n'

  display += '    ' + name.cyan + '\n'

  var flat = []

  domain.forEach(function(record) {
    var row = []
    row.push('  ')
    row.push(record.record_type)
    row.push(record.name)
    row.push(record.content)
    flat.push(row)
  })

  var t = table(flat)

  return display += t + '\n'

}

function formatRow(item) {

  var display = '\n'

  for (key in item) {
    var name    = key
    var records = item[key]

    var flat = []

    if (!records.length) {
      display += '   ' + name.cyan + '\n'
      display += '   none'.grey
      continue
    }

    records.forEach(function(rec) {
      flat.push([' ',rec.record_type.grey, rec.name.grey, rec.content.grey])
    })

    var t = table(flat)

    display += '   ' + name.cyan + '\n'
    display += t

  }

  return display + '\n\n'

}


//console.log('records')
//console.log(version)
//console.dir(argv)


//var domain = argv._[0]

//console.log(domain)








